// Filter Tanggal 
var dataset = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") //Citra Landsat 8
  .filterDate('2023-01-01', '2023-12-31'); //Tanggal perekaman citra
 
//Scaling Factor: koreksi nilai reflektansi dan suhu  
// Applies scaling factors.
function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    return image.addBands(opticalBands, null, true)
               .addBands(thermalBands, null, true);
}

//Masking Awan dan Bayangan: Menggunakan fungsi maskL8 
//untuk menyaring piksel yang tertutup awan
function maskL8(image) {
    // Get the pixel QA band.
    var qa = image.select('QA_PIXEL');
    var cloud = qa.bitwiseAnd(1 << 5).and(qa.bitwiseAnd(1 << 7)).or(qa.bitwiseAnd(1 << 3));
    // Both flags should be set to zero, indicating clear conditions.
    var cloudShadowBitMask = (1 << 3);
    var cloudsBitMask = (1 << 4);
    var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    return image.updateMask(mask);
}

//Memproses dan menggabungkan citra
dataset = dataset
  .filterBounds(lpg)
  .map(applyScaleFactors)
  .map(maskL8)
  .mean()
  .clip(lpg);
  
Map.centerObject(lpg, 12);
Map.addLayer(dataset)
//Eksplorasi Data dengan visualisasi citra komposit band
//TrueColor(warna alami)
var visNat = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3
};

//false color(mendeteksi vegetasi)
var visFalse = {
  'bands' : ['SR_B5','SR_B3','SR_B2'],
  'min':0,
  'max':0.3
};

//false color urban(menyoroti area terbangun)
var visFlsUrb = {
  'bands':['SR_B7','SR_B6','SR_B4'],
  'min':0,
  'max':0.3
};

Map.addLayer(dataset, visNat, 'True Color (432)');
Map.addLayer(dataset, visFalse, 'False Color (532)');
Map.addLayer(dataset, visFlsUrb, 'False Color Urban');


// Menggabungkan data sampel/train menjadi satu koleksi
var sampel = Badan_Air.merge(Lahan_Bervegetasi)
                      .merge(Daerah_Pertanian)
                      .merge(Lahan_Terbuka)
                      .merge(Lahan_Terbangun);
print('Kelas:', sampel);
print('Jumlah Kelas:', sampel.size());

// OVERSAMPLING
// Menghitung distribusi kelas
var classDistribution = sampel.reduceColumns(ee.Reducer.frequencyHistogram(), ['lc']);
print('Distribusi Kelas:', classDistribution);

// Mendapatkan histogram sebagai dictionary
var histogram = ee.Dictionary(classDistribution.get('histogram'));
print('Histogram:', histogram);

// Mendapatkan jumlah maksimum sampel (kelas mayoritas)
var maxCount = ee.Number(histogram.values().reduce(ee.Reducer.max()));
print('Jumlah Maksimum Sampel:', maxCount);

// Fungsi untuk melakukan oversampling pada setiap kelas
function oversampleClass(classValue) {
  var classSamples = sampel.filter(ee.Filter.eq('lc', classValue));
  var classSize = ee.Number(classSamples.size());
  var multiplier = maxCount.divide(classSize).ceil();

  // Mengulangi fitur sebanyak multiplier dan membatasi agar tidak melebihi maxCount
  var oversampledList = ee.List.repeat(classSamples.toList(classSize), multiplier).flatten();
  return ee.FeatureCollection(oversampledList).limit(maxCount);
}

// Mendapatkan daftar kelas unik
var uniqueClasses = sampel.aggregate_array('lc').distinct();
print('Daftar Kelas Unik:', uniqueClasses);

// Melakukan oversampling untuk setiap kelas dan memastikan hasilnya datar
var oversampledCollections = uniqueClasses.map(oversampleClass);
var balancedSamples = ee.FeatureCollection(oversampledCollections).flatten();
print('Balanced Sample After Flatten:', balancedSamples);

// Mengecek distribusi kelas setelah oversampling
var balancedClassDistribution = balancedSamples.reduceColumns(ee.Reducer.frequencyHistogram(), ['lc']);
print('Distribusi Kelas Setelah Oversampling:', balancedClassDistribution);

// BAND UNTUK DATA TRAINING
var cBands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'];

// Mengambil data training dari sampel seimbang
var training = dataset.select(cBands).sampleRegions({
  collection: balancedSamples,
  properties: ['lc'],
  scale: 30,
  geometries: true
});
print('Training Data:', training);

// STRATIFIED SAMPLING 80/20
// Fungsi untuk membagi data menjadi train dan test secara seimbang untuk setiap kelas
function stratifiedSplit(classValue, splitRatio) {
  var classSamples = training.filter(ee.Filter.eq('lc', classValue));
  
  // Mengacak data dengan menambahkan kolom 'random'
  classSamples = classSamples.randomColumn('random', 1);

  // Menghitung jumlah total sampel untuk kelas ini
  var total = classSamples.size();
  
  // Menentukan jumlah sampel untuk training
  var trainSize = ee.Number(total).multiply(splitRatio).floor();

  // Membagi data menjadi training dan test
  var trainSamples = classSamples.limit(trainSize);
  var testSamples = classSamples.filter(ee.Filter.gte('random', trainSize.divide(total)));

  return {
    train: trainSamples,
    test: testSamples
  };
}

// Mendapatkan daftar kelas unik
var uniqueClasses = training.aggregate_array('lc').distinct();
print('Daftar Kelas Unik:', uniqueClasses);

// Melakukan stratified split untuk setiap kelas dengan rasio 80% train dan 20% test
var splitRatio = 0.8;
var splits = uniqueClasses.map(function(classValue) {
  return stratifiedSplit(classValue, splitRatio);
});

// Menggabungkan semua subset train dan test
var trainingSubset = ee.FeatureCollection(splits.map(function(split) {
  return ee.Dictionary(split).get('train');
})).flatten();

var testSubset = ee.FeatureCollection(splits.map(function(split) {
  return ee.Dictionary(split).get('test');
})).flatten();

print('Jumlah Training Subset:', trainingSubset.size());
print('Jumlah Test Subset:', testSubset.size());

// /////////////////////////////////////////////////////////////
//Melatih model klasifikasi
//Melatih model Random Forest dengan trainingSubset
// var klasifikasi = ee.Classifier.smileRandomForest(20).train({
//   features: trainingSubset,
//   classProperty: 'lc',
//   inputProperties: cBands
// });

var klasifikasi = ee.Classifier.smileRandomForest({
numberOfTrees: 20,
  minLeafPopulation: 5,
  bagFraction: 0.7     
}).train({
  features: trainingSubset,
  classProperty: 'lc',
  inputProperties: cBands
});

// Mengklasifikasikan citra
var classified = dataset.select(cBands).classify(klasifikasi);
Map.addLayer(classified, {min: 0, max: 4, palette: ['#0ef3ff','#0b8810','#19ff41','#e6ff25', '#e62121']}, 'klasifikasi');

// ///////////////////////////////////////////////////////////////
//EVALUASI MODEL
// Mengukur akurasi pada data training
var trainAccuracy = klasifikasi.confusionMatrix().accuracy();
print('Training Accuracy:', trainAccuracy);

// Menguji akurasi pada data validasi
var testResult = testSubset.classify(klasifikasi);
var testAccuracy = testResult.errorMatrix('lc', 'classification');

// Menampilkan matriks kebingungan
print('test error matrix: ', testAccuracy);

// Menghitung akurasi pengujian
var testAccuracyValue = testAccuracy.accuracy();
print('testAccuracy', testAccuracyValue);

// Hitung perbedaan akurasi hanya jika nilai valid
var accuracyDifference = ee.Number(trainAccuracy).subtract(ee.Number(testAccuracyValue)).abs();
print('Accuracy Difference:', accuracyDifference);

// var importance = klasifikasi.explain().get('importance');
// print('Feature Importance:', importance);

// Menghitung statistik performa dari matriks kebingungan
var confusionMatrix = testAccuracy.array();
var tp = confusionMatrix.get([1, 1]); // True Positive
var tn = confusionMatrix.get([0, 0]); // True Negative
var fp = confusionMatrix.get([1, 0]); // False Positive
var fn = confusionMatrix.get([0, 1]); // False Negative

// Menghitung presisi, recall, dan F1-score
var precision = tp.divide(tp.add(fp));
var recall = tp.divide(tp.add(fn));
var f1Score = ee.Number(2).multiply(precision).multiply(recall).divide(precision.add(recall));

// Menampilkan nilai presisi, recall, dan F1-score
print('Precision: ', precision);
print('Recall: ', recall);
print('F1 Score: ', f1Score);

//mencetak hasil uji akurasi
print('Akurasi keseluruhan: ', testAccuracy.accuracy());
print('Akurasi Produser', testAccuracy.producersAccuracy());
print('Akurasi User', testAccuracy.consumersAccuracy());
print('Koefisien Kappa', testAccuracy.kappa());

// // Mengukur akurasi pada training set
// var trainAccuracy = klasifikasi.confusionMatrix().accuracy();
// print('trainAccuracy', trainAccuracy);

// // Mengukur akurasi pada validation set
// var testAccuracy = validationSubset.classify(klasifikasi).errorMatrix('lc', 'classification');
// print('Validation error matrix:', testAccuracy);
// print('Akurasi keseluruhan:', testAccuracy.accuracy());
// print('Koefisien Kappa', testAccuracy.kappa());

var clippedClassified = classified.updateMask(classified.clip(lpg).mask());

Export.image.toDrive({
  image: clippedClassified,
  description: 'Klasifikasi2023',
  scale: 30,
  region: lpg.geometry(),
  maxPixels: 1e9
});




